#![feature(convert)]
#![allow(dead_code)]
#![allow(unused_variables)]

extern crate type_printer;

mod ui;

fn main() {
    ui::title();

    let mut v = vec![];
    v.push("Hello".to_string());

    // corral that x, and don't let it loose!
    {
        let x = &v[0];
        type_printer::print_type_of(x);
    }

    // just pass it to a function as borrowed!
    young_programmer_print_that_type(&v[0]);
    young_programmer_print_that_type(&v[0]);

    v.push("world".to_string());
    println!("{:?}", v);
}

fn young_programmer_print_that_type(strang: &String) {
    type_printer::print_type_of(strang);
}

fn a_function_that_takes_a_string_slice(strang: &str) {
    type_printer::print_type_of(strang);
}
